2023-02-05 19:10:02,135 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
CUDA available: True
GPU 0: Tesla V100-SXM2-32GB
CUDA_HOME: /data/apps/cuda/10.2
NVCC: Cuda compilation tools, release 10.2, V10.2.8
GCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.2, CUDNN_VERSION=7.6.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-05 19:10:02,142 - mmcls - INFO - Distributed training: False
2023-02-05 19:10:02,328 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_imagenet/train.txt',
        classes='data/flower_imagenet/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='data',
        ann_file='data/flower_imagenet/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='data/flower_imagenet/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(
    interval=1, metric='accuracy', metric_options=dict(topk=(1, )))
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/data/home/scv9611/run/mmclassification/checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[8, 10])
runner = dict(type='EpochBasedRunner', max_epochs=12)
work_dir = './work_dirs/resnet18_b32_flower'
gpu_ids = [0]

2023-02-05 19:10:02,328 - mmcls - INFO - Set random seed to 1318409969, deterministic: False
2023-02-05 19:10:07,531 - mmcls - INFO - load checkpoint from local path: /data/home/scv9611/run/mmclassification/checkpoints/resnet18_8xb32_in1k_20210831-fbbb1da6.pth
2023-02-05 19:10:07,703 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-05 19:10:07,703 - mmcls - INFO - Start running, host: scv9611@g0035, work_dir: /data/run01/scv9611/mmclassification/work_dirs/resnet18_b32_flower
2023-02-05 19:10:07,703 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-05 19:10:07,704 - mmcls - INFO - workflow: [('train', 1)], max: 12 epochs
2023-02-05 19:10:07,704 - mmcls - INFO - Checkpoints will be saved to /data/run01/scv9611/mmclassification/work_dirs/resnet18_b32_flower by HardDiskBackend.
2023-02-05 19:10:16,036 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-05 19:10:17,926 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.0839
2023-02-05 19:10:24,701 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-05 19:10:26,202 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 93.0070
2023-02-05 19:10:32,865 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-05 19:10:34,290 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 93.0070
2023-02-05 19:10:41,009 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-05 19:10:42,518 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 94.2308
2023-02-05 19:10:49,435 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-05 19:10:50,856 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.5315
2023-02-05 19:10:57,897 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-05 19:10:59,524 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.2308
2023-02-05 19:11:06,408 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-05 19:11:07,892 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 94.9301
2023-02-05 19:11:14,473 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-05 19:11:15,977 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 95.1049
2023-02-05 19:11:22,648 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-05 19:11:24,068 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 94.0559
2023-02-05 19:11:30,745 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-05 19:11:32,349 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.5804
2023-02-05 19:11:38,993 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-05 19:11:40,493 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 94.5804
2023-02-05 19:11:47,154 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-05 19:11:48,687 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 94.2308
